#!/usr/bin/env python

from configobj import ConfigObj
from blox.exceptions import *
import os, sys, logging, time
import gc

logging.basicConfig()
logger = logging.getLogger( 'blox' )
handler = logging.FileHandler('/var/log/blox.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
handler.setFormatter( formatter )
logger.addHandler( handler )

#logger.setLevel(level=logging.DEBUG)

config = ConfigObj("/etc/blox.conf")
triggers = {}

daemonize = False
if 'daemonize' in config['general'] and 'true' == config['general']['daemonize']:
	logger.info('daemonize %s' % config['general']['daemonize'] )
	daemonize = True

def run( trigger, input ):
  logger.info('running %s'%trigger)
  name = config[ trigger ]['type']
  logger.info( "name: %s" % name )
  mod_name = name.rsplit('.',1)[1]
  
  logger.info( "mod: %s" % mod_name )
  module = __import__( name, fromlist=[ mod_name ] )
  mod = getattr( module, mod_name )()
  try:
    output = mod.output( input, config[ trigger ] )
    run_triggers( trigger, output )
  except ParseException as e:
    logger.error( 'Run failed: %s' % e )

def run_triggers( name, input ):
  if name in triggers:
    for trigger in triggers[ name ]:
      if daemonize:
        pid = os.fork()
      else:
        pid = 0
      if ( pid == 0 ):
        if daemonize:
          os.chdir("/")
          os.setsid()
          os.umask(0)
        if daemonize:
          pid2 = os.fork()
        else:
          pid2 = 0
        if ( pid2 == 0 ):
          run( trigger, input )
	  gc.collect()
        else:
          sys.exit()
      else:
        sys.exit()

#logger.debug('loading config')
for p in config:
  process = config[p]
  if 'trigger' in process:
    if isinstance( process['trigger'], basestring ):
      triggers.setdefault( process['trigger'], [] ).append( p )
    else:
      for i in process['trigger']:
        triggers.setdefault( i, [] ).append( p )

# dump file handles
if daemonize:
  sys.stdin.flush()
  sys.stdout.flush()
  sys.stderr.flush()
  null = os.open(os.devnull, os.O_RDWR)
  errout = os.open("/var/log/blox.err", os.O_RDWR|os.O_CREAT)
  os.dup2(null, sys.stdin.fileno())
  os.dup2(null, sys.stdout.fileno())
  os.dup2(errout, sys.stderr.fileno())
  os.close(null)
  os.close(errout)

wait = 60
loglevel = logging.INFO
if 'general' in config:
  if 'timeout' in config['general']:
    wait = int( config['general']['timeout'] )
  if 'loglevel' in config['general']:
    if config['general']['loglevel'] == 'debug':
      loglevel = logging.DEBUG
    elif config['general']['loglevel'] == 'info':
      loglevel = logging.INFO
    elif config['general']['loglevel'] == 'warning':
      loglevel = logging.WARNING

logger.setLevel(level=loglevel)

while True:
  logger.info( 'Starting cycle' )
  name = config[ 'input' ]['type']
  mod_name = name.rsplit('.',1)[1]
  
  logger.info( mod_name )
  module = __import__(name,fromlist=[ mod_name ])

  mod = getattr( module, mod_name )()
  input = mod.input( config['input'] )

  try:
    run_triggers( 'input', input )
  except ParseException as e:
    logger.error( 'Run failed: %s' % e )

  if daemonize:
    logger.debug( 'sleep %s' % wait )
    time.sleep( wait )
  else:
    logger.debug( 'finished' )
    break

#import objgraph
#objgraph.show_most_common_types()
